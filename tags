!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
Application	old/serialGUI.py	/^class Application(Frame):$/;"	c
C	controldesing.py	/^C = ctrl.tf([2*alpha*kp*kd, kp*ki*kd*alpha, kp*ki], [kd*alpha, 1, 0])$/;"	v
Cd	controldesing.py	/^Cd = ctrl.sample_system(C, 1, method='zoh')$/;"	v
Fin	TankSimulationSER.py	/^Fin = Value('f', 4.0)  # fluxo de entrada$/;"	v
Fin	old/AnimatedTank.py	/^Fin = Value('f', 2.5)  # fluxo de entrada$/;"	v
Fin_update	old/AnimatedTank.py	/^def Fin_update(val):$/;"	f
G	controldesing.py	/^G = ctrl.tf(100\/2, [1, 1\/2])$/;"	v
Gd	controldesing.py	/^Gd = ctrl.sample_system(G, 0.01, method='zoh')$/;"	v
Refresher	old/serialGUI.py	/^    def Refresher(self):$/;"	m	class:Application
V_cc	old/serialGUI.py	/^V_cc = 4.97	# This is the ADC's positive reference voltage$/;"	v
__init__	old/serialGUI.py	/^    def __init__(self, master=None):$/;"	m	class:Application
a	device.py	/^a = device02()     # write a string$/;"	v
addspace	rbpi.py	/^addspace = server.register_namespace(name)$/;"	v
addspace	ufrgs.py	/^addspace = server.register_namespace(name)$/;"	v
alpha	controldesing.py	/^alpha = 0.1$/;"	v
app	old/serialGUI.py	/^app = Application(master=root)$/;"	v
ax	old/animateexample.py	/^fig, ax = plt.subplots()$/;"	v
ax	old/animation.py	/^fig, ax = plt.subplots()$/;"	v
axButton1	old/animateexample.py	/^axButton1 = plt.axes([0.1, 0.9, 0.1, 0.1])$/;"	v
axButton2	old/animateexample.py	/^axButton2 = plt.axes([0.25, 0.9, 0.2, 0.1])$/;"	v
axSlider1	old/animateexample.py	/^axSlider1 = plt.axes([0.1, 0.2, 0.8, 0.05])$/;"	v
axSlider2	old/animateexample.py	/^axSlider2 = plt.axes([0.1, 0.1, 0.8, 0.05])$/;"	v
axSlider2	old/animation.py	/^axSlider2 = plt.axes([0.1, 0.1, 0.8, 0.05])$/;"	v
bstring	old/byte.py	/^bstring = b'bstring'$/;"	v
btn1	old/animateexample.py	/^btn1 = Button(axButton1, 'Reset')$/;"	v
btn2	old/animateexample.py	/^btn2 = Button(axButton2, 'Set Val')$/;"	v
checksum	request.py	/^def checksum(cmd: bytes):  # calculates the checksum of command string$/;"	f
cid	old/animateexample.py	/^cid = slider2.on_changed(val_update)$/;"	v
cid	old/animation.py	/^cid = slider2.on_changed(val_update)$/;"	v
client	controller.py	/^client = Client(url)$/;"	v
com_process	TankSimulationOPCUA.py	/^com_process = Process(target=communication, args=(ser,))$/;"	v
com_process	TankSimulationSER.py	/^com_process = Process(target=communication, args=(ser,))$/;"	v
comm	old/serialGUI.py	/^    def comm(self):$/;"	m	class:Application
comms	old/serialGUI.py	/^comms = True$/;"	v
communication	TankSimulationOPCUA.py	/^def communication(ser):  # simulate device behavior$/;"	f
communication	TankSimulationSER.py	/^def communication(ser):  # simulate device behavior$/;"	f
communication	old/controllerold.py	/^def communication():$/;"	f
communication	rbpi.py	/^def communication(ser):$/;"	f
communication	ufrgs.py	/^def communication(ser):$/;"	f
control1	request.py	/^control1 = write_ch(b"03", b"0", b"+00.000") $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"0", b"+10.000")  $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"1", b"+00.000") $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"1", b"+10.000")  $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"2", b"+00.000")  $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"2", b"+15.000")  $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"3", b"+00.000")  $/;"	v
control1	request.py	/^control1 = write_ch(b"03", b"3", b"+10.000") $/;"	v
controller	controller.py	/^def controller():$/;"	f
controller	old/controllerold.py	/^def controller():$/;"	f
createWidgets	old/serialGUI.py	/^    def createWidgets(self):$/;"	m	class:Application
ctrl	controldesing.py	/^import control as ctrl$/;"	I
data	rbpi.py	/^data = bytes('{:06.3f}'.format(pumps[2].get_value()), 'ascii')$/;"	v
device02	TankSimulationOPCUA.py	/^def device02(buffer, ser):  # simulate device behavior$/;"	f
device02	TankSimulationSER.py	/^def device02(buffer, ser):  # simulate device behavior$/;"	f
device02	device.py	/^def device02():  # simulate device behavior$/;"	f
device03	TankSimulationOPCUA.py	/^def device03(buffer, ser):  # simulate device behavior $/;"	f
device03	TankSimulationSER.py	/^def device03(buffer, ser):  # simulate device behavior$/;"	f
device05	TankSimulationOPCUA.py	/^def device05(buffer, ser):  # simulate device behavior$/;"	f
dynamic	TankSimulationSER.py	/^def dynamic():$/;"	f
dynamic	old/AnimatedTank.py	/^def dynamic():$/;"	f
dynamic1	TankSimulationOPCUA.py	/^def dynamic1():$/;"	f
dynamic2	TankSimulationOPCUA.py	/^def dynamic2():$/;"	f
dynamic3	TankSimulationOPCUA.py	/^def dynamic3():$/;"	f
dynamic4	TankSimulationOPCUA.py	/^def dynamic4():$/;"	f
dynamic5	TankSimulationOPCUA.py	/^def dynamic5():$/;"	f
dynamic6	TankSimulationOPCUA.py	/^def dynamic6():$/;"	f
dynamic_process	TankSimulationSER.py	/^dynamic_process = Process(target=dynamic)$/;"	v
dynamic_process	old/AnimatedTank.py	/^dynamic_process = Process(target=dynamic)$/;"	v
dynamic_process1	TankSimulationOPCUA.py	/^dynamic_process1 = Process(target=dynamic1)$/;"	v
e_1	controller.py	/^e_1 = 0$/;"	v
e_1	old/controllerold.py	/^e_1 = 0$/;"	v
e_2	controller.py	/^e_2 = 0$/;"	v
exit_protocol	old/serialGUI.py	/^    def exit_protocol(self):$/;"	m	class:Application
f1	TankSimulationOPCUA.py	/^f1 = Value('f', 0) # vazão de entrada$/;"	v
f2	TankSimulationOPCUA.py	/^f2 = Value('f', 1) # vazão de entrada$/;"	v
f3	TankSimulationOPCUA.py	/^f3 = Value('f', 2) # vazão de entrada$/;"	v
f4	TankSimulationOPCUA.py	/^f4 = Value('f', 3) # vazão de entrada$/;"	v
fig	old/animateexample.py	/^fig, ax = plt.subplots()$/;"	v
fig	old/animation.py	/^fig, ax = plt.subplots()$/;"	v
fig_loop	old/AnimatedTank.py	/^def fig_loop(p):$/;"	f
flow	rbpi.py	/^flow = node.add_object(addspace, "Flow Sensors")$/;"	v
flow	ufrgs.py	/^flow = node.add_object(addspace, "Flow Sensors")$/;"	v
flow1	controller.py	/^flow1 = client.get_node("ns=2;i=9")$/;"	v
flow1	old/controllerold.py	/^flow1 = Value('f', 0) # vazão de entrada$/;"	v
flow1	rbpi.py	/^flow1 = flow.add_variable(addspace, "FLOW1", 0.0)$/;"	v
flow1	ufrgs.py	/^flow1 = flow.add_variable(addspace, "FLOW1", 0.0)$/;"	v
flow2	controller.py	/^flow2 = client.get_node("ns=2;i=10")$/;"	v
flow2	old/controllerold.py	/^flow2 = Value('f', 1) # vazão de entrada$/;"	v
flow2	rbpi.py	/^flow2 = flow.add_variable(addspace, "FLOW2", 0.0)$/;"	v
flow2	ufrgs.py	/^flow2 = flow.add_variable(addspace, "FLOW2", 0.0)$/;"	v
flow3	controller.py	/^flow3 = client.get_node("ns=2;i=11")$/;"	v
flow3	old/controllerold.py	/^flow3 = Value('f', 2) # vazão de entrada$/;"	v
flow3	rbpi.py	/^flow3 = flow.add_variable(addspace, "FLOW3", 0.0)$/;"	v
flow3	ufrgs.py	/^flow3 = flow.add_variable(addspace, "FLOW3", 0.0)$/;"	v
flow4	controller.py	/^flow4 = client.get_node("ns=2;i=12")$/;"	v
flow4	old/controllerold.py	/^flow4 = Value('f', 3) # vazão de entrada$/;"	v
flow4	rbpi.py	/^flow4 = flow.add_variable(addspace, "FLOW4", 0.0)$/;"	v
flow4	ufrgs.py	/^flow4 = flow.add_variable(addspace, "FLOW4", 0.0)$/;"	v
flows	old/controllerold.py	/^flows = [flow1, flow2, flow3, flow4]$/;"	v
flows	rbpi.py	/^flows = [flow1, flow2, flow3, flow4]$/;"	v
flows	ufrgs.py	/^flows = [flow1, flow2, flow3, flow4]$/;"	v
get_level	controller.py	/^def get_level(lvl):$/;"	f
get_levelsim	controller.py	/^def get_levelsim(lvl):$/;"	f
h	TankSimulationOPCUA.py	/^h = 0.1  # passo da solução numérica$/;"	v
h	TankSimulationSER.py	/^h = 0.1  # passo da solução numérica$/;"	v
h	old/AnimatedTank.py	/^h = 0.1  # passo da solução numérica$/;"	v
h1	TankSimulationOPCUA.py	/^h1 = Value('f', 0)  # condição inicial de nivel$/;"	v
h1	controller.py	/^h1 = Value ('f',0) # nível do tanque 1$/;"	v
h2	TankSimulationOPCUA.py	/^h2 = Value('f', 0)  # condição inicial de nivel$/;"	v
h2	controller.py	/^h2 = Value ('f',0) # nível do tanque 2$/;"	v
h3	TankSimulationOPCUA.py	/^h3 = Value('f', 0)  # condição inicial de nivel$/;"	v
h3	controller.py	/^h3 = Value ('f',0) # nível do tanque 3$/;"	v
h4	TankSimulationOPCUA.py	/^h4 = Value('f', 0)  # condição inicial de nivel$/;"	v
h4	controller.py	/^h4 = Value ('f',0) # nível do tanque 4$/;"	v
h5	TankSimulationOPCUA.py	/^h5 = Value('f', 0)  # condição inicial de nivel$/;"	v
h5	controller.py	/^h5 = Value ('f',0) # nível do tanque 5$/;"	v
h6	TankSimulationOPCUA.py	/^h6 = Value('f', 0)  # condição inicial de nivel$/;"	v
h6	controller.py	/^h6 = Value ('f',0) # nível do tanque 6$/;"	v
interface	old/AnimatedTank.py	/^def interface():$/;"	f
interface_process	old/AnimatedTank.py	/^interface_process = Process(target=interface)$/;"	v
isfloat	old/serialGUI.py	/^def isfloat(x):$/;"	f
kd	controldesing.py	/^kd = 2$/;"	v
ki	controldesing.py	/^ki= 0.075$/;"	v
kp	controldesing.py	/^kp = 5.5$/;"	v
lvl	rbpi.py	/^lvl = node.add_object(addspace, "Level Sensors")$/;"	v
lvl	ufrgs.py	/^lvl = node.add_object(addspace, "Level Sensors")$/;"	v
lvl1	controller.py	/^lvl1 = client.get_node("ns=2;i=2")$/;"	v
lvl1	old/controllerold.py	/^lvl1 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl1	rbpi.py	/^lvl1 = lvl.add_variable(addspace, "LVL1", 0.0)$/;"	v
lvl1	ufrgs.py	/^lvl1 = lvl.add_variable(addspace, "LVL1", 0.0)$/;"	v
lvl2	controller.py	/^lvl2 = client.get_node("ns=2;i=3")$/;"	v
lvl2	old/controllerold.py	/^lvl2 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl2	rbpi.py	/^lvl2 = lvl.add_variable(addspace, "LVL2", 0.0)$/;"	v
lvl2	ufrgs.py	/^lvl2 = lvl.add_variable(addspace, "LVL2", 0.0)$/;"	v
lvl3	controller.py	/^lvl3 = client.get_node("ns=2;i=4")$/;"	v
lvl3	old/controllerold.py	/^lvl3 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl3	rbpi.py	/^lvl3 = lvl.add_variable(addspace, "LVL3", 0.0)$/;"	v
lvl3	ufrgs.py	/^lvl3 = lvl.add_variable(addspace, "LVL3", 0.0)$/;"	v
lvl4	controller.py	/^lvl4 = client.get_node("ns=2;i=5")$/;"	v
lvl4	old/controllerold.py	/^lvl4 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl4	rbpi.py	/^lvl4 = lvl.add_variable(addspace, "LVL4", 0.0)$/;"	v
lvl4	ufrgs.py	/^lvl4 = lvl.add_variable(addspace, "LVL4", 0.0)$/;"	v
lvl5	controller.py	/^lvl5 = client.get_node("ns=2;i=6")$/;"	v
lvl5	old/controllerold.py	/^lvl5 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl5	rbpi.py	/^lvl5 = lvl.add_variable(addspace, "LVL5", 0.0)$/;"	v
lvl5	ufrgs.py	/^lvl5 = lvl.add_variable(addspace, "LVL5", 0.0)$/;"	v
lvl6	controller.py	/^lvl6 = client.get_node("ns=2;i=7")$/;"	v
lvl6	old/controllerold.py	/^lvl6 = Value('f', 0)  # condição inicial de nivel$/;"	v
lvl6	rbpi.py	/^lvl6 = lvl.add_variable(addspace, "LVL6", 0.0)$/;"	v
lvl6	ufrgs.py	/^lvl6 = lvl.add_variable(addspace, "LVL6", 0.0)$/;"	v
lvls	old/controllerold.py	/^lvls = [lvl1, lvl2, lvl3, lvl4, lvl5, lvl6]$/;"	v
lvls	rbpi.py	/^lvls = [lvl1, lvl2, lvl3, lvl4, lvl5, lvl6]$/;"	v
lvls	ufrgs.py	/^lvls = [lvl1, lvl2, lvl3, lvl4, lvl5, lvl6]$/;"	v
module1_ch0	request.py	/^module1_ch0 = read_ch(b"02", b"0") $/;"	v
module1_ch1	request.py	/^module1_ch1 = read_ch(b"02", b"1") $/;"	v
module1_ch2	request.py	/^module1_ch2 = read_ch(b"02", b"2") $/;"	v
module1_ch3	request.py	/^module1_ch3 = read_ch(b"02", b"3") $/;"	v
module2_ch0	request.py	/^module2_ch0 = read_ch(b"05", b"0") $/;"	v
module2_ch1	request.py	/^module2_ch1 = read_ch(b"05", b"1") $/;"	v
module2_ch2	request.py	/^module2_ch2 = read_ch(b"05", b"2") $/;"	v
module2_ch3	request.py	/^module2_ch3 = read_ch(b"05", b"3") $/;"	v
module2_ch4	request.py	/^module2_ch4 = read_ch(b"05", b"4") $/;"	v
module2_ch5	request.py	/^module2_ch5 = read_ch(b"05", b"5") $/;"	v
name	rbpi.py	/^name = "OPC UA DEQUI"$/;"	v
name	ufrgs.py	/^name = "OPC UA DEQUI"$/;"	v
new_bstring	old/byte.py	/^new_bstring = ustring.encode()$/;"	v
node	rbpi.py	/^node = server.get_objects_node()$/;"	v
node	ufrgs.py	/^node = server.get_objects_node()$/;"	v
np	controldesing.py	/^import numpy as np$/;"	I
p	old/animateexample.py	/^p, = plt.plot(x, y, linewidth=2, color='blue')$/;"	v
p	old/animation.py	/^p, = plt.plot(x, y, linewidth=2, color='blue')$/;"	v
plt	controldesing.py	/^import matplotlib.pyplot as plt$/;"	I
plt	old/AnimatedTank.py	/^import matplotlib.pyplot as plt$/;"	I
plt	old/animateexample.py	/^import matplotlib.pyplot as plt$/;"	I
plt	old/animation.py	/^import matplotlib.pyplot as plt$/;"	I
port_name	old/serialGUI.py	/^port_name = input("Enter a port name: ")      # Python > 2.7$/;"	v
pump	rbpi.py	/^pump = node.add_object(addspace, "Pump Actuators")$/;"	v
pump	ufrgs.py	/^pump = node.add_object(addspace, "Pump Actuators")$/;"	v
pump1	controller.py	/^pump1 = client.get_node("ns=2;i=14")$/;"	v
pump1	old/controllerold.py	/^pump1 = Value('f', 4.0)  # fluxo de entrada$/;"	v
pump1	rbpi.py	/^pump1 = pump.add_variable(addspace, "PUMP1", 0.0)$/;"	v
pump1	ufrgs.py	/^pump1 = pump.add_variable(addspace, "PUMP1", 0.0)$/;"	v
pump2	controller.py	/^pump2 = client.get_node("ns=2;i=15")$/;"	v
pump2	old/controllerold.py	/^pump2 = Value('f', 3.5)  # fluxo de entrada$/;"	v
pump2	rbpi.py	/^pump2 = pump.add_variable(addspace, "PUMP2", 0.0)$/;"	v
pump2	ufrgs.py	/^pump2 = pump.add_variable(addspace, "PUMP2", 0.0)$/;"	v
pump3	controller.py	/^pump3 = client.get_node("ns=2;i=16")$/;"	v
pump3	old/controllerold.py	/^pump3 = Value('f', 3.0)  # fluxo de entrada$/;"	v
pump3	rbpi.py	/^pump3 = pump.add_variable(addspace, "PUMP3", 0.0)$/;"	v
pump3	ufrgs.py	/^pump3 = pump.add_variable(addspace, "PUMP3", 0.0)$/;"	v
pump4	controller.py	/^pump4 = client.get_node("ns=2;i=17")$/;"	v
pump4	old/controllerold.py	/^pump4 = Value('f', 2.5)  # fluxo de entrada$/;"	v
pump4	rbpi.py	/^pump4 = pump.add_variable(addspace, "PUMP4", 0.0)$/;"	v
pump4	ufrgs.py	/^pump4 = pump.add_variable(addspace, "PUMP4", 0.0)$/;"	v
pump5	controller.py	/^pump5 = client.get_node("ns=2;i=18")$/;"	v
pump5	old/controllerold.py	/^pump5 = Value('f', 2.0)  # fluxo de entrada$/;"	v
pump5	rbpi.py	/^pump5 = pump.add_variable(addspace, "PUMP5", 0.0)$/;"	v
pump5	ufrgs.py	/^pump5 = pump.add_variable(addspace, "PUMP5", 0.0)$/;"	v
pump6	controller.py	/^pump6 = client.get_node("ns=2;i=19")$/;"	v
pump6	old/controllerold.py	/^pump6 = Value('f', 1.0)  # fluxo de entrada$/;"	v
pump6	rbpi.py	/^pump6 = pump.add_variable(addspace, "PUMP6", 0.0)$/;"	v
pump6	ufrgs.py	/^pump6 = pump.add_variable(addspace, "PUMP6", 0.0)$/;"	v
pumps	old/controllerold.py	/^pumps = [pump1, pump2, pump3, pump4, pump5, pump6]$/;"	v
pumps	rbpi.py	/^pumps = [pump1, pump2, pump3, pump4, pump5, pump6]$/;"	v
pumps	ufrgs.py	/^pumps = [pump1, pump2, pump3, pump4, pump5, pump6]$/;"	v
read_ch	DCON.py	/^def read_ch(AA: bytes, N: bytes, ser):  # Read sthe analog input$/;"	f
read_ch	device.py	/^def read_ch(AA: hex, N: hex):  # Readsthe analog input$/;"	f
read_ch	request.py	/^def read_ch(AA: bytes, N: bytes):  # Read sthe analog input$/;"	f
read_ch_ck	request.py	/^def read_ch_ck(AA: bytes, N: bytes):  # Read sthe analog input$/;"	f
read_data	DCON.py	/^def read_data(ser):  # read bytes until read \\r(carriage return)$/;"	f
read_data	TankSimulationOPCUA.py	/^def read_data(ser):  # read bytes until read \\r(carriage return)$/;"	f
read_data	TankSimulationSER.py	/^def read_data(ser):  # read bytes until read \\r(carriage return)$/;"	f
read_data	device.py	/^def read_data():  # read bytes until read \\r(carriage return)$/;"	f
read_data	request.py	/^def read_data():  # read bytes until read \\r(carriage return)$/;"	f
ref1	controller.py	/^ref1 = Value('f', 20) # referência$/;"	v
ref1	old/controllerold.py	/^ref1 = Value('f', 0) # referência$/;"	v
ref2	controller.py	/^ref2 = Value('f', 0) # referência$/;"	v
ref2	old/controllerold.py	/^ref2 = Value('f', 0) # referência$/;"	v
ref3	controller.py	/^ref3 = Value('f', 0) # referência$/;"	v
ref3	old/controllerold.py	/^ref3 = Value('f', 0) # referência$/;"	v
ref4	controller.py	/^ref4 = Value('f', 0) # referência$/;"	v
ref4	old/controllerold.py	/^ref4 = Value('f', 0) # referência$/;"	v
ref5	controller.py	/^ref5 = Value('f', 0) # referência$/;"	v
ref5	old/controllerold.py	/^ref5 = Value('f', 0) # referência$/;"	v
ref6	controller.py	/^ref6 = Value('f', 0) # referência$/;"	v
ref6	old/controllerold.py	/^ref6 = Value('f', 0) # referência$/;"	v
resetSliders	old/animateexample.py	/^def resetSliders(event):$/;"	f
root	old/serialGUI.py	/^root = Tk()$/;"	v
say_msg	old/serialGUI.py	/^    def say_msg(self):$/;"	m	class:Application
ser	TankSimulationOPCUA.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
ser	TankSimulationSER.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
ser	device.py	/^ser = serial.Serial('\/dev\/ttyUSB0')  # open serial port$/;"	v
ser	old/controllerold.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
ser	old/example1.py	/^ser = serial.Serial('\/dev\/ttyUSB0')  # open serial port$/;"	v
ser	old/serialGUI.py	/^ser = serial.Serial($/;"	v
ser	rbpi.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
ser	request.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
ser	ufrgs.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=1)  # open serial port$/;"	v
server	rbpi.py	/^server = Server()$/;"	v
server	ufrgs.py	/^server = Server()$/;"	v
setValue	old/animateexample.py	/^def setValue(val):$/;"	f
slider1	old/animateexample.py	/^slider1 = Slider(axSlider1, 'Slider1', valmin=0, valmax=100)$/;"	v
slider2	old/animateexample.py	/^slider2 = Slider($/;"	v
slider2	old/animation.py	/^slider2 = Slider($/;"	v
start_server	server.py	/^def start_server(url):$/;"	f
step	controldesing.py	/^t, step = ctrl.step_response(G, t)$/;"	v
stop_flag	TankSimulationOPCUA.py	/^stop_flag = 0 # flag para parar os processos$/;"	v
stop_flag	TankSimulationOPCUA.py	/^stop_flag = 1$/;"	v
stop_flag	controller.py	/^stop_flag = 0$/;"	v
stop_flag	controller.py	/^stop_flag = 1$/;"	v
stop_flag	rbpi.py	/^stop_flag = 0$/;"	v
stop_flag	ufrgs.py	/^stop_flag = 0$/;"	v
stop_flag	ufrgs.py	/^stop_flag = 1$/;"	v
t	controldesing.py	/^t = np.arange(0, 50, 0.01)$/;"	v
t	controldesing.py	/^t, step = ctrl.step_response(G, t)$/;"	v
u1	TankSimulationOPCUA.py	/^u1 = Value('f', 16)  # fluxo de entrada$/;"	v
u1	controller.py	/^u1 = Value('f', 0) # sinal de controle do tanque 1$/;"	v
u2	TankSimulationOPCUA.py	/^u2 = Value('f', 3.5)  # fluxo de entrada$/;"	v
u2	controller.py	/^u2 = Value('f', 0) # sinal de controle do tanque 2$/;"	v
u3	TankSimulationOPCUA.py	/^u3 = Value('f', 3.0)  # fluxo de entrada$/;"	v
u3	controller.py	/^u3 = Value('f', 0) # sinal de controle do tanque 3$/;"	v
u4	TankSimulationOPCUA.py	/^u4 = Value('f', 2.5)  # fluxo de entrada$/;"	v
u4	controller.py	/^u4 = Value('f', 0) # sinal de controle do tanque 4$/;"	v
u5	TankSimulationOPCUA.py	/^u5 = Value('f', 2.0)  # fluxo de entrada$/;"	v
u5	controller.py	/^u5 = Value('f', 0) # sinal de controle do tanque 5$/;"	v
u6	TankSimulationOPCUA.py	/^u6 = Value('f', 1.0)  # fluxo de entrada$/;"	v
u6	controller.py	/^u6 = Value('f', 0) # sinal de controle do tanque 6$/;"	v
update_variable	rbpi.py	/^def update_variable(variable, AA: bytes, N: bytes, ser):$/;"	f
update_variable	ufrgs.py	/^def update_variable(variable, AA: bytes, N: bytes, ser):$/;"	f
url	controller.py	/^url = "opc.tcp:\/\/192.168.15.19:2124"$/;"	v
url	rbpi.py	/^url = "opc.tcp:\/\/192.168.15.17:2124"$/;"	v
url	ufrgs.py	/^url = "opc.tcp:\/\/143.54.96.127:2124"$/;"	v
ustring	old/byte.py	/^ustring = 'A unicode string'$/;"	v
val_update	old/animateexample.py	/^def val_update(val):$/;"	f
val_update	old/animation.py	/^def val_update(val):$/;"	f
write_ch	DCON.py	/^def write_ch(AA: bytes, N: bytes, data: bytes, ser):  # Write data to analog output$/;"	f
write_ch	request.py	/^def write_ch(AA: bytes, N: bytes, data: bytes):  # Write data to analog output$/;"	f
write_ch_ck	request.py	/^def write_ch_ck(AA: bytes, N: bytes, data: bytes):  # Write data to a. output$/;"	f
x	old/animateexample.py	/^x = list(range(0, 11))$/;"	v
x	old/animation.py	/^x = list(range(0, 11))$/;"	v
y	old/animateexample.py	/^y = [10]*11$/;"	v
y	old/animation.py	/^y = [10]*11$/;"	v
yk_1	TankSimulationOPCUA.py	/^yk_1 = 0  # condição inicial$/;"	v
yk_1	TankSimulationSER.py	/^yk_1 = 0  # condição inicial$/;"	v
yk_1	controller.py	/^yk_1 = 0$/;"	v
yk_1	old/AnimatedTank.py	/^yk_1 = 0  # condição inicial$/;"	v
yk_1	old/controllerold.py	/^yk_1 = 0$/;"	v
yk_2	controller.py	/^yk_2 = 0$/;"	v
yk_sync	TankSimulationSER.py	/^yk_sync = Value('f', 0)  # condição inicial$/;"	v
yk_sync	old/AnimatedTank.py	/^yk_sync = Value('f', 0)  # condição inicial$/;"	v
